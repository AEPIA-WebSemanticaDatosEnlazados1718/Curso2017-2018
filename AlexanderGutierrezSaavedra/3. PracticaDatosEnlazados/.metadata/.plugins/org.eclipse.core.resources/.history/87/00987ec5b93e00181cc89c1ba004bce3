package co.com.datosenlazados.sparqsql;

import java.io.InputStream;

import org.apache.jena.datatypes.RDFDatatype;
import org.apache.jena.graph.Node;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.AnonId;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.RDFVisitor;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.Statement;
import org.apache.jena.rdf.model.StmtIterator;
import org.apache.jena.util.FileManager;
//import org.apache.jena.vocabulary.VCARD;

public class ConsultaSparqSQL {
	/*Creación de variables estáticas iniciales */
	public static String ns = "http://somewhere#";
	public static String foafNS = "http://xmlns.com/foaf/0.1/";
	//public static String foafEmailURI = foafNS+"email";
	//public static String foafKnowsURI = foafNS+"knows";
	
	public static void main(String[] args) {
		String archivoRDF = "Accidentalidad-en-medellin-2017.rdf";
		//String archivoRDF = "D:\\Personal\\Master\\Materias\\Web semántica\\WorkSpace\\JenaTutorial2015\\Jena\\example3.rdf";
		
		// 1. Crear un modelo vacío
		Model modelo = ModelFactory.createDefaultModel();
				
		// 2. Cargar el archivo sobre el que se va a consultar
		InputStream archivoEntrada = FileManager.get().open(archivoRDF);

		if (archivoEntrada == null)
			throw new IllegalArgumentException("El archivo: "+archivoRDF+" no fue encontrado");

		// 3. Leer el archivo RDF
		modelo.read(archivoEntrada, null);
		
		// consulta para encontrar los recursos Tipo Ubicacion (para esto buscamos los recursos que tengan la propiedad acc:X
		String []queryString = new String[4];
		queryString[0] = //queryStringUbicacion
				"PREFIX acc: <http://antioquia.opendata.co/accidentes#> " +
				"SELECT ?recurso "+
				"WHERE { ?recurso acc:X ?NombreRecurso.} ";
		// consulta para encontrar los recursos Tipo Nomenclatura (para esto buscamos los recursos que tengan la propiedad acc:clase
		queryString[1] = //queryStringNomenclatura = 
				"PREFIX acc: <http://antioquia.opendata.co/accidentes#> " +
				"SELECT ?recurso "+
				"WHERE { ?recurso acc:barrio ?NombreRecurso.} ";
		// consulta para encontrar los recursos Tipo Accidente (para esto buscamos los recursos que tengan la propiedad acc:clase
		queryString[2] = //queryStringAccidente = 
				"PREFIX acc: <http://antioquia.opendata.co/accidentes#> " +
				"SELECT ?recurso "+
				"WHERE { ?recurso acc:clase ?NombreRecurso.} ";
		// consulta para encontrar los recursos Tipo Momento (para esto buscamos los recursos que tengan la propiedad acc:fecha
		queryString[3] = //queryStringMomento = 
				"PREFIX acc: <http://antioquia.opendata.co/accidentes#> " +
				"SELECT ?recurso "+
				"WHERE { ?recurso acc:fecha ?NombreRecurso.} ";
		/*String queryString = 
				"PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#> " +
				"SELECT ?recurso "+
				"WHERE { ?recurso vcard:FN ?Nombre.} ";*/
		
		// mostrar todos los recurso por cada tipo
		Query query;
		QueryExecution qexec;
		ResultSet results;
		
		
		/*for(int i=0;i<4;i++) {
			query = QueryFactory.create(queryString[i]);
			qexec = QueryExecutionFactory.create(query, modelo) ;
			results = qexec.execSelect() ;
	
			while (results.hasNext())
			{
				QuerySolution binding = results.nextSolution();
				Resource recurso = (Resource) binding.get("recurso");
			    System.out.println("Recurso: "+recurso.getURI());
			}
		}
		
		
*/
		// Mostrar todos los accidentes de tipo choque
		String queryStringChoque = "PREFIX acc: <http://antioquia.opendata.co/accidentes#> " +
				"SELECT * "+
				"WHERE { ?recurso acc:clase 'Incendio'.} ";
		query = QueryFactory.create(queryStringChoque);
		qexec = QueryExecutionFactory.create(query, modelo) ;
		results = qexec.execSelect() ;
		
		
		while (results.hasNext())
		{
			QuerySolution binding = results.nextSolution();
		    RDFNode x = binding.get("clase") ;
		    if ( x.isLiteral() )
            {
                Literal titleStr = (Literal)x  ;
                System.out.println("    "+titleStr) ;
            }
            else
                System.out.println("Strange - not a literal: "+x) ;
		}
		
		
	}

}
